{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ChatFlow","text":""},{"location":"#introduction","title":"Introduction","text":"<p>ChatFlow is a domain-specific language designed specifically for authoring conversational dialog flows, such as for chatbots and voice assistants. </p> <p>It utilizes an easy to read declarative format to define different conversation flows, the actions within them, and how they connect together. This makes it intuitive for developers to visualize and manage complex dialog logic.</p> <p>Under the hood, ChatFlow scripts are compiled into an intermediate tree representation. The included runtime engine can then interpret and execute the conversation flows based on user inputs.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Readability: ChatFlow features a highly readable grammar that enables both developers and non-technical people to understand conversation logic. It uses English-like syntax following natural language constructs, which reduces the learning curve.</p> </li> <li> <p>Integration: ChatFlow provides rich integration capabilities with external systems via Python. It allows data processing in real-time during the conversation. Users can define custom execution flows named \"tributaries\", which enable integration with anything in Python including databases, APIs and more.</p> </li> <li> <p>Interpreted: ChatFlow scripts compile into an intermediate tree format, which enables analysis, optimization and detailed debug information.</p> </li> <li> <p>Extensibility: ChatFlow provides extension points to customize execution by defining tributaries.</p> </li> <li> <p>Information Flow: ChatFlow follows one-way flow of information between flows, where data can only be passed from caller flows to callee flows. This improves modularity and hides complexity.</p> </li> </ul>"},{"location":"#learning-chatflow","title":"Learning ChatFlow","text":"<ol> <li>Quick Start</li> <li>Grammar</li> <li>Concepts</li> <li>Advanced</li> </ol>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>ChatFlow owes much gratitude to the open source projects that helped make it possible.</p> <p>In particular:</p> <ul> <li>Lark     ChatFlow builds on the excellent Lark parsing toolkit for generating the abstract syntax tree from the Conversation Flow scripts. The ability to define a clean grammar and easily parse it into a manipulatable tree structure is invaluable.</li> </ul>"},{"location":"#license","title":"License","text":"<p>Lark uses the MIT license.</p>"},{"location":"LICENSE/","title":"License","text":"<p>Copyright \u00a9 2023 65456u</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"explanation/","title":"Explanation","text":"<p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how     to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions     here</li> </ul>"},{"location":"how-to-guides/","title":"How to guides","text":"<p>This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.</p>"},{"location":"how-to-guides/#how-to-add-two-numbers","title":"How To Add Two Numbers?","text":"<p>You have two numbers and you need to add them together. You're in luck! The <code>calculator</code> package can help you get this done.</p> <p>Download the code from this GitHub repository and place the <code>calculator/</code> folder in the same directory as your Python script:</p> <pre><code>your_project/\n\u2502\n\u251c\u2500\u2500 calculator/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 calculations.py\n\u2502\n\u2514\u2500\u2500 your_script.py\n</code></pre> <p>Inside of <code>your_script.py</code> you can now import the <code>add()</code> function from the <code>calculator.calculations</code> module:</p> <pre><code># your_script.py\nfrom calculator.calculations import add\n</code></pre> <p>After you've imported the function, you can use it to add any two numbers that you need to add:</p> <pre><code># your_script.py\nfrom calculator.calculations import add\n\nprint(add(20, 22))  # OUTPUT: 42.0\n</code></pre> <p>You're now able to add any two numbers, and you'll always get a <code>float</code> as a result.</p>"},{"location":"quick-start/","title":"Quick Start","text":""},{"location":"quick-start/#install","title":"Install","text":"<p>Install from PyPI</p> <pre><code>pip install chatflow\n</code></pre> <p>Install from source</p> <pre><code># clone this repository\ngit clone https://github.com/65456u/ChatFlow.git\n# get into the repository\ncd ChatFlow  \n# install required packages\npip install -r requirements.txt\n# install ChatFlow  \npip install .\n</code></pre>"},{"location":"quick-start/#first-chatflow-program","title":"First ChatFlow Program","text":"<p>Let's first write a simple ChatFlow that simply echos the input.</p> <pre><code>flow origin {\n  listen for message\n  speak message  \n}\n</code></pre> <p>To run this:</p> <pre><code>from chatflow import Interpreter, Runtime\n\ncode = \"\"\"\nflow origin {\n  listen for message\n  speak message\n}\n\"\"\"\n\ninterpreter = Interpreter(code=code)\nruntime = Runtime(interpreter)\nruntime.run() \n</code></pre>"},{"location":"quick-start/#usage","title":"Usage","text":"<p>Key concepts:  </p> <ul> <li><code>flow</code> defines a conversation flow</li> <li><code>listen</code> gets input from user</li> <li><code>speak</code> outputs message  </li> </ul> <p>This example shows:</p> <ul> <li>Defining a simple <code>origin</code> flow</li> <li>Listening for a <code>message</code> input</li> <li>Speaking the message back to user</li> </ul> <p>Check out the docs to learn more!</p>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#chatflow.Interpreter","title":"<code>Interpreter</code>","text":"<p>A class that represents an interpreter for executing ChatFlow scripts.</p> <p>Parameters:</p> Name Type Description Default <code>code_path</code> <code>str</code> <p>The path to the ChatFlow script file. Defaults to None.</p> <code>None</code> <code>code</code> <code>str</code> <p>The ChatFlow script code. Defaults to None.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>script</code> <code>str</code> <p>The ChatFlow script code.</p> <code>parser</code> <code>Lark</code> <p>The Lark parser for parsing the ChatFlow script.</p> <code>tree</code> <code>Tree</code> <p>The parsed syntax tree of the ChatFlow script.</p> <p>Methods:</p> Name Description <code>__repr__</code> <p>Returns a pretty-printed representation of the parsed syntax tree.</p> Source code in <code>chatflow\\interpreter.py</code> <pre><code>class Interpreter:\n    '''\n    A class that represents an interpreter for executing ChatFlow scripts.\n\n    Args:\n        code_path (str, optional): The path to the ChatFlow script file. Defaults to None.\n        code (str, optional): The ChatFlow script code. Defaults to None.\n\n    Attributes:\n        script (str): The ChatFlow script code.\n        parser (lark.Lark): The Lark parser for parsing the ChatFlow script.\n        tree (lark.Tree): The parsed syntax tree of the ChatFlow script.\n\n    Methods:\n        __repr__(str): Returns a pretty-printed representation of the parsed syntax tree.\n\n    '''\n\n    def __init__(\n            self,\n            code_path=None,\n            code=None,\n    ):\n        if code_path:\n            with open(code_path, \"r\") as f:\n                self.script = f.read()\n        elif code:\n            self.script = code\n        self.parser = Lark(grammar, start=\"chatflow\", parser=\"lalr\")\n        self.tree = self.parser.parse(self.script)\n\n    def __repr__(self):\n        return self.tree.pretty()\n</code></pre>"},{"location":"reference/#chatflow.Runtime","title":"<code>Runtime</code>","text":"<p>Runtime for ChatFlow</p> <p>The Runtime class is responsible for executing the ChatFlow program. It manages the flow of execution, handles statements and blocks, and maintains the symbol table and context stack.</p> <p>Parameters:</p> Name Type Description Default <code>interpreter</code> <code>Interpreter</code> <p>The interpreter object.</p> required <code>speak_function</code> <code>callable</code> <p>The function used for speaking. Defaults to print.</p> <code>aprint</code> <code>listen_function</code> <code>callable</code> <p>The function used for listening. Defaults to read_input_with_timeout.</p> <code>read_input_with_timeout</code> <p>Attributes:</p> Name Type Description <code>tree</code> <code>Tree</code> <p>The tree representing the ChatFlow program.</p> <code>speak_function</code> <code>callable</code> <p>The function used for speaking.</p> <code>listen_function</code> <code>callable</code> <p>The function used for listening.</p> <code>flow_dict</code> <code>dict</code> <p>A dictionary mapping flow names to their corresponding blocks.</p> <code>exit</code> <code>bool</code> <p>A boolean value indicating whether the program should exit.</p> <code>contextStack</code> <code>list</code> <p>A list of Context objects representing the context stack.</p> <p>Methods:</p> Name Description <code>init__</code> <p>Initialize the Runtime object.</p> <code>register_flow</code> <p>Register the flows defined in the ChatFlow program.</p> <code>run</code> <p>Run the ChatFlow program starting from the 'origin' flow.</p> <code>run_flow</code> <p>Run a specific flow in the ChatFlow program.</p> <code>run_block</code> <p>Run a block of statements in the ChatFlow program.</p> <code>run_statement</code> <p>Run a single statement in the ChatFlow program.</p> <code>run_if</code> <p>Run an if statement in the ChatFlow program.</p> <code>run_else</code> <p>Run an else statement in the ChatFlow program.</p> <code>run_engage</code> <p>Run an engage statement in the ChatFlow program.</p> <code>run_while</code> <p>Run a while statement in the ChatFlow program.</p> Source code in <code>chatflow\\runtime.py</code> <pre><code>class Runtime:\n    \"\"\"Runtime for ChatFlow\n\n    The Runtime class is responsible for executing the ChatFlow program. It manages the flow of execution,\n    handles statements and blocks, and maintains the symbol table and context stack.\n\n    Args:\n        interpreter (Interpreter): The interpreter object.\n        speak_function (callable, optional): The function used for speaking. Defaults to print.\n        listen_function (callable, optional): The function used for listening. Defaults to read_input_with_timeout.\n\n    Attributes:\n        tree (lark.Tree): The tree representing the ChatFlow program.\n        speak_function (callable): The function used for speaking.\n        listen_function (callable): The function used for listening.\n        flow_dict (dict): A dictionary mapping flow names to their corresponding blocks.\n        exit (bool): A boolean value indicating whether the program should exit.\n        contextStack (list): A list of Context objects representing the context stack.\n\n    Methods:\n        init__: Initialize the Runtime object.\n        register_flow: Register the flows defined in the ChatFlow program.\n        run: Run the ChatFlow program starting from the 'origin' flow.\n        run_flow: Run a specific flow in the ChatFlow program.\n        run_block: Run a block of statements in the ChatFlow program.\n        run_statement: Run a single statement in the ChatFlow program.\n        run_if: Run an if statement in the ChatFlow program.\n        run_else: Run an else statement in the ChatFlow program.\n        run_engage: Run an engage statement in the ChatFlow program.\n        run_while: Run a while statement in the ChatFlow program.\n\n    \"\"\"\n\n    def __init__(\n            self, interpreter, speak_function=aprint, listen_function=read_input_with_timeout\n    ):\n        \"\"\"Initialize the Runtime object.\n\n        Args:\n            interpreter (Interpreter): The interpreter object.\n            speak_function (callable, optional): The function used for speaking. Defaults to print.\n            listen_function (callable, optional): The function used for listening. Defaults to read_input_with_timeout.\n\n        \"\"\"\n        self.tree = interpreter.tree\n        self.speak_function = speak_function\n        self.listen_function = listen_function\n        self.flow_dict = {}\n        self.exit = False\n        self.register_flow()\n        self.contextStack = []\n\n    def register_flow(self):\n        \"\"\"\n        Register the flows defined in the ChatFlow program.\n        \"\"\"\n        for flow in self.tree.children:\n            flow_name = flow.children[0].children[0].children[0]\n            block = flow.children[1]\n            self.flow_dict[flow_name] = block\n\n    async def run(self):\n        \"\"\"\n        Run the ChatFlow program starting from the 'origin' flow.\n        \"\"\"\n        await self.run_flow(\"origin\")\n\n    async def run_flow(self, flow_name, parameter=None):\n        \"\"\"\n        Run a specific flow in the ChatFlow program.\n\n        Args:\n            flow_name (str): The name of the flow to run.\n            parameter (any, optional): The parameter to pass to the flow. Defaults to None.\n        \"\"\"\n        if flow_name not in self.flow_dict:\n            raise Exception(f\"Flow {flow_name} not found\")\n        tree = self.flow_dict[flow_name]\n        context = Context(parameter, tree)\n        self.contextStack.append(context)\n        await self.run_block(tree, context)\n        self.contextStack.pop()\n\n    async def run_block(self, block, context):\n        \"\"\"\n        Run a block of statements in the ChatFlow program.\n\n        Args:\n            block (lark.Tree): The block of statements to run.\n            context (Context): The current context.\n        \"\"\"\n        context.push_scope()\n        for statement in block.children:\n            if self.exit:\n                return\n            await self.run_statement(statement, context)\n\n    async def run_statement(self, statement, context):\n        \"\"\"\n        Run a single statement in the ChatFlow program.\n\n        Args:\n            statement (lark.Tree): The statement to run.\n            context (Context): The current context.\n        \"\"\"\n        statement = statement.children[0]\n        state_type = statement.data\n        match state_type:\n            case \"speak_statement\":\n                await run_speak(statement, context, self.speak_function)\n            case \"listen_statement\":\n                await run_listen(statement, context, self.listen_function)\n            case \"if_statement\":\n                await self.run_if(statement, context)\n            case \"engage_statement\":\n                await self.run_engage(statement, context)\n            case \"assign_statement\":\n                run_assign(statement, context)\n            case \"end_statement\":\n                self.exit = True\n            case \"handover_statement\":\n                await run_handover(\n                    statement, context, self.speak_function, self.listen_function\n                )\n            case \"while_statement\":\n                await self.run_while(statement, context)\n\n    async def run_if(self, statement, context):\n        \"\"\"\n        Run an if statement in the ChatFlow program.\n\n        Args:\n            statement (lark.Tree): The if statement to run.\n            context (Context): The current context.\n        \"\"\"\n        condition = statement.children[0]\n        result = get_condition(condition, context)\n        if result:\n            await self.run_block(statement.children[1], context)\n        else:\n            if len(statement.children) == 3:\n                await self.run_else(statement.children[2], context)\n\n    async def run_else(self, statement, context):\n        \"\"\"\n        Run an else statement in the ChatFlow program.\n\n        Args:\n            statement (lark.Tree): The else statement to run.\n            context (Context): The current context.\n        \"\"\"\n        else_statement = statement.children[0]\n        match else_statement.data:\n            case \"block\":\n                await self.run_block(else_statement, context)\n            case \"if_statement\":\n                await self.run_if(else_statement, context)\n\n    async def run_engage(self, statement, context):\n        \"\"\"\n        Run an engage statement in the ChatFlow program.\n\n        Args:\n            statement (lark.Tree): The engage statement to run.\n            context (Context): The current context.\n        \"\"\"\n        flow_name = get_flow_name(statement.children[0])\n        await self.run_flow(flow_name, context.get_parameter())\n\n    async def run_while(self, statement, context):\n        \"\"\"\n        Run a while statement in the ChatFlow program.\n\n        Args:\n            statement (lark.Tree): The while statement to run.\n            context (Context): The current context.\n        \"\"\"\n        condition = statement.children[0]\n        while get_condition(condition, context):\n            await self.run_block(statement.children[1], context)\n</code></pre>"},{"location":"reference/#chatflow.Runtime.__init__","title":"<code>__init__(interpreter, speak_function=aprint, listen_function=read_input_with_timeout)</code>","text":"<p>Initialize the Runtime object.</p> <p>Parameters:</p> Name Type Description Default <code>interpreter</code> <code>Interpreter</code> <p>The interpreter object.</p> required <code>speak_function</code> <code>callable</code> <p>The function used for speaking. Defaults to print.</p> <code>aprint</code> <code>listen_function</code> <code>callable</code> <p>The function used for listening. Defaults to read_input_with_timeout.</p> <code>read_input_with_timeout</code> Source code in <code>chatflow\\runtime.py</code> <pre><code>def __init__(\n        self, interpreter, speak_function=aprint, listen_function=read_input_with_timeout\n):\n    \"\"\"Initialize the Runtime object.\n\n    Args:\n        interpreter (Interpreter): The interpreter object.\n        speak_function (callable, optional): The function used for speaking. Defaults to print.\n        listen_function (callable, optional): The function used for listening. Defaults to read_input_with_timeout.\n\n    \"\"\"\n    self.tree = interpreter.tree\n    self.speak_function = speak_function\n    self.listen_function = listen_function\n    self.flow_dict = {}\n    self.exit = False\n    self.register_flow()\n    self.contextStack = []\n</code></pre>"},{"location":"reference/#chatflow.Runtime.register_flow","title":"<code>register_flow()</code>","text":"<p>Register the flows defined in the ChatFlow program.</p> Source code in <code>chatflow\\runtime.py</code> <pre><code>def register_flow(self):\n    \"\"\"\n    Register the flows defined in the ChatFlow program.\n    \"\"\"\n    for flow in self.tree.children:\n        flow_name = flow.children[0].children[0].children[0]\n        block = flow.children[1]\n        self.flow_dict[flow_name] = block\n</code></pre>"},{"location":"reference/#chatflow.Runtime.run","title":"<code>run()</code>  <code>async</code>","text":"<p>Run the ChatFlow program starting from the 'origin' flow.</p> Source code in <code>chatflow\\runtime.py</code> <pre><code>async def run(self):\n    \"\"\"\n    Run the ChatFlow program starting from the 'origin' flow.\n    \"\"\"\n    await self.run_flow(\"origin\")\n</code></pre>"},{"location":"reference/#chatflow.Runtime.run_block","title":"<code>run_block(block, context)</code>  <code>async</code>","text":"<p>Run a block of statements in the ChatFlow program.</p> <p>Parameters:</p> Name Type Description Default <code>block</code> <code>Tree</code> <p>The block of statements to run.</p> required <code>context</code> <code>Context</code> <p>The current context.</p> required Source code in <code>chatflow\\runtime.py</code> <pre><code>async def run_block(self, block, context):\n    \"\"\"\n    Run a block of statements in the ChatFlow program.\n\n    Args:\n        block (lark.Tree): The block of statements to run.\n        context (Context): The current context.\n    \"\"\"\n    context.push_scope()\n    for statement in block.children:\n        if self.exit:\n            return\n        await self.run_statement(statement, context)\n</code></pre>"},{"location":"reference/#chatflow.Runtime.run_else","title":"<code>run_else(statement, context)</code>  <code>async</code>","text":"<p>Run an else statement in the ChatFlow program.</p> <p>Parameters:</p> Name Type Description Default <code>statement</code> <code>Tree</code> <p>The else statement to run.</p> required <code>context</code> <code>Context</code> <p>The current context.</p> required Source code in <code>chatflow\\runtime.py</code> <pre><code>async def run_else(self, statement, context):\n    \"\"\"\n    Run an else statement in the ChatFlow program.\n\n    Args:\n        statement (lark.Tree): The else statement to run.\n        context (Context): The current context.\n    \"\"\"\n    else_statement = statement.children[0]\n    match else_statement.data:\n        case \"block\":\n            await self.run_block(else_statement, context)\n        case \"if_statement\":\n            await self.run_if(else_statement, context)\n</code></pre>"},{"location":"reference/#chatflow.Runtime.run_engage","title":"<code>run_engage(statement, context)</code>  <code>async</code>","text":"<p>Run an engage statement in the ChatFlow program.</p> <p>Parameters:</p> Name Type Description Default <code>statement</code> <code>Tree</code> <p>The engage statement to run.</p> required <code>context</code> <code>Context</code> <p>The current context.</p> required Source code in <code>chatflow\\runtime.py</code> <pre><code>async def run_engage(self, statement, context):\n    \"\"\"\n    Run an engage statement in the ChatFlow program.\n\n    Args:\n        statement (lark.Tree): The engage statement to run.\n        context (Context): The current context.\n    \"\"\"\n    flow_name = get_flow_name(statement.children[0])\n    await self.run_flow(flow_name, context.get_parameter())\n</code></pre>"},{"location":"reference/#chatflow.Runtime.run_flow","title":"<code>run_flow(flow_name, parameter=None)</code>  <code>async</code>","text":"<p>Run a specific flow in the ChatFlow program.</p> <p>Parameters:</p> Name Type Description Default <code>flow_name</code> <code>str</code> <p>The name of the flow to run.</p> required <code>parameter</code> <code>any</code> <p>The parameter to pass to the flow. Defaults to None.</p> <code>None</code> Source code in <code>chatflow\\runtime.py</code> <pre><code>async def run_flow(self, flow_name, parameter=None):\n    \"\"\"\n    Run a specific flow in the ChatFlow program.\n\n    Args:\n        flow_name (str): The name of the flow to run.\n        parameter (any, optional): The parameter to pass to the flow. Defaults to None.\n    \"\"\"\n    if flow_name not in self.flow_dict:\n        raise Exception(f\"Flow {flow_name} not found\")\n    tree = self.flow_dict[flow_name]\n    context = Context(parameter, tree)\n    self.contextStack.append(context)\n    await self.run_block(tree, context)\n    self.contextStack.pop()\n</code></pre>"},{"location":"reference/#chatflow.Runtime.run_if","title":"<code>run_if(statement, context)</code>  <code>async</code>","text":"<p>Run an if statement in the ChatFlow program.</p> <p>Parameters:</p> Name Type Description Default <code>statement</code> <code>Tree</code> <p>The if statement to run.</p> required <code>context</code> <code>Context</code> <p>The current context.</p> required Source code in <code>chatflow\\runtime.py</code> <pre><code>async def run_if(self, statement, context):\n    \"\"\"\n    Run an if statement in the ChatFlow program.\n\n    Args:\n        statement (lark.Tree): The if statement to run.\n        context (Context): The current context.\n    \"\"\"\n    condition = statement.children[0]\n    result = get_condition(condition, context)\n    if result:\n        await self.run_block(statement.children[1], context)\n    else:\n        if len(statement.children) == 3:\n            await self.run_else(statement.children[2], context)\n</code></pre>"},{"location":"reference/#chatflow.Runtime.run_statement","title":"<code>run_statement(statement, context)</code>  <code>async</code>","text":"<p>Run a single statement in the ChatFlow program.</p> <p>Parameters:</p> Name Type Description Default <code>statement</code> <code>Tree</code> <p>The statement to run.</p> required <code>context</code> <code>Context</code> <p>The current context.</p> required Source code in <code>chatflow\\runtime.py</code> <pre><code>async def run_statement(self, statement, context):\n    \"\"\"\n    Run a single statement in the ChatFlow program.\n\n    Args:\n        statement (lark.Tree): The statement to run.\n        context (Context): The current context.\n    \"\"\"\n    statement = statement.children[0]\n    state_type = statement.data\n    match state_type:\n        case \"speak_statement\":\n            await run_speak(statement, context, self.speak_function)\n        case \"listen_statement\":\n            await run_listen(statement, context, self.listen_function)\n        case \"if_statement\":\n            await self.run_if(statement, context)\n        case \"engage_statement\":\n            await self.run_engage(statement, context)\n        case \"assign_statement\":\n            run_assign(statement, context)\n        case \"end_statement\":\n            self.exit = True\n        case \"handover_statement\":\n            await run_handover(\n                statement, context, self.speak_function, self.listen_function\n            )\n        case \"while_statement\":\n            await self.run_while(statement, context)\n</code></pre>"},{"location":"reference/#chatflow.Runtime.run_while","title":"<code>run_while(statement, context)</code>  <code>async</code>","text":"<p>Run a while statement in the ChatFlow program.</p> <p>Parameters:</p> Name Type Description Default <code>statement</code> <code>Tree</code> <p>The while statement to run.</p> required <code>context</code> <code>Context</code> <p>The current context.</p> required Source code in <code>chatflow\\runtime.py</code> <pre><code>async def run_while(self, statement, context):\n    \"\"\"\n    Run a while statement in the ChatFlow program.\n\n    Args:\n        statement (lark.Tree): The while statement to run.\n        context (Context): The current context.\n    \"\"\"\n    condition = statement.children[0]\n    while get_condition(condition, context):\n        await self.run_block(statement.children[1], context)\n</code></pre>"},{"location":"reference/#chatflow.register_tributary","title":"<code>register_tributary(tributary_name)</code>","text":"<p>Register a tributary function to be used in ChatFlow</p> <p>Parameters:</p> Name Type Description Default <code>tributary_name</code> <code>str</code> <p>The name of the tributary to be registered</p> required <p>Returns:</p> Name Type Description <code>function</code> <code>callable</code> <p>The decorated function</p> Source code in <code>chatflow\\tributary.py</code> <pre><code>def register_tributary(tributary_name):\n    \"\"\"Register a tributary function to be used in ChatFlow\n\n    Args:\n        tributary_name (str): The name of the tributary to be registered\n\n    Returns:\n        function(callable): The decorated function\n\n    \"\"\"\n\n    def decorator(func):\n        tributary_dict[tributary_name] = func\n        return func\n\n    return decorator\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Help newcomers with getting started</li> <li>Teach readers about your library by making them     write code</li> <li>Inspire confidence through examples that work for     everyone, repeatably</li> <li>Give readers an immediate sense of achievement</li> <li>Show concrete examples, no abstractions</li> <li>Provide the minimum necessary explanation</li> <li>Avoid any distractions</li> </ul>"}]}